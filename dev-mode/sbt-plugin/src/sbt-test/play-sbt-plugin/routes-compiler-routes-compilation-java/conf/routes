# Copyright (C) from 2022 The Play Framework Contributors <https://github.com/playframework>, 2011-2021 Lightbend Inc. <https://www.lightbend.com>

GET         /                                controllers.Application.index
POST        /post                            controllers.Application.post
GET         /with/:param                     controllers.Application.withParam(param)

GET         /instance                        @controllers.InstanceController.index

GET         /users/:userId                   controllers.Application.user(userId: models.UserId)
GET         /query-user                      controllers.Application.queryUser(userId: models.UserId.UserIdQueryParam)

GET         /escapes/$i<\d+>                 controllers.Application.takeIntEscapes(i: java.lang.Integer)

GET         /take-bool                       controllers.Application.takeBool(b: java.lang.Boolean)
GET         /take-bool-2/:b                  controllers.Application.takeBool2(b: java.lang.Boolean)

GET         /take-str                        controllers.Application.takeString(x: String)
GET         /take-str-jopt                   controllers.Application.takeStringOptional(x: java.util.Optional[String])
GET         /take-jchar                      controllers.Application.takeCharacter(x: Character)
GET         /take-jchar-jopt                 controllers.Application.takeCharacterOptional(x: java.util.Optional[Character])
GET         /take-jshort                     controllers.Application.takeJavaShort(x: java.lang.Short)
GET         /take-jshort-jopt                controllers.Application.takeJavaShortOptional(x: java.util.Optional[java.lang.Short])
GET         /take-jint                       controllers.Application.takeInteger(x: java.lang.Integer)
GET         /take-jint-jopt                  controllers.Application.takeIntegerOptional(x: java.util.Optional[java.lang.Integer])
GET         /take-joptint                    controllers.Application.takeOptionalInt(x: java.util.OptionalInt)
GET         /take-joptlong                   controllers.Application.takeOptionalLong(x: java.util.OptionalLong)
GET         /take-joptdouble                 controllers.Application.takeOptionalDouble(x: java.util.OptionalDouble)
GET         /take-jlist-jchar                controllers.Application.takeJavaListCharacter(x: java.util.List[Character])
GET         /take-jlist-jchar-jopt           controllers.Application.takeJavaListCharacterOptional(x: java.util.Optional[java.util.List[Character]])
GET         /take-jlist-str                  controllers.Application.takeJavaListString(x: java.util.List[String])
GET         /take-jlist-str-jopt             controllers.Application.takeJavaListStringOptional(x: java.util.Optional[java.util.List[String]])
GET         /take-jlist-jshort               controllers.Application.takeJavaListShort(x: java.util.List[java.lang.Short])
GET         /take-jlist-jshort-jopt          controllers.Application.takeJavaListShortOptional(x: java.util.Optional[java.util.List[java.lang.Short]])
GET         /take-jlist-jint                 controllers.Application.takeJavaListInteger(x: java.util.List[java.lang.Integer])
GET         /take-jlist-jint-jopt            controllers.Application.takeJavaListIntegerOptional(x: java.util.Optional[java.util.List[java.lang.Integer]])
####
#### Same again with defaults (/take-...-d):
####
GET         /take-str-d                      controllers.Application.takeStringWithDefault(x: String ?= "abc")
GET         /take-str-jopt-d                 controllers.Application.takeStringOptionalWithDefault(x: java.util.Optional[String] ?= java.util.Optional.of("abc"))
GET         /take-jchar-d                    controllers.Application.takeCharacterWithDefault(x: Character ?= 'a')
GET         /take-jchar-jopt-d               controllers.Application.takeCharacterOptionalWithDefault(x: java.util.Optional[Character] ?= java.util.Optional.of('a'))
GET         /take-jshort-d                   controllers.Application.takeJavaShortWithDefault(x: java.lang.Short ?= 123.        toShort)
GET         /take-jshort-jopt-d              controllers.Application.takeJavaShortOptionalWithDefault(x: java.util.Optional[java.lang.Short] ?= java.util.Optional.of(123.toShort))
GET         /take-jint-d                     controllers.Application.takeIntegerWithDefault(x: java.lang.Integer ?= 123)
GET         /take-jint-jopt-d                controllers.Application.takeIntegerOptionalWithDefault(x: java.util.Optional[java.lang.Integer] ?= java.util.Optional.of(123))
GET         /take-joptint-d                  controllers.Application.takeOptionalIntWithDefault(x: java.util.OptionalInt ?= java.util.OptionalInt.of(123))
GET         /take-joptlong-d                 controllers.Application.takeOptionalLongWithDefault(x: java.util.OptionalLong ?= java.util.OptionalLong.of(123L))
GET         /take-joptdouble-d               controllers.Application.takeOptionalDoubleWithDefault(x: java.util.OptionalDouble ?= java.util.OptionalDouble.of(1.23))
GET         /take-jlist-jchar-d              controllers.Application.takeJavaListCharacterWithDefault(x: java.util.List[Character] ?= java.util.List.of('a', 'b', 'c'))
GET         /take-jlist-jchar-jopt-d         controllers.Application.takeJavaListCharacterOptionalWithDefault(x: java.util.Optional[java.util.List[Character]] ?= java.util.Optional.of(java.util.List.of('a', 'b', 'c')))
GET         /take-jlist-str-d                controllers.Application.takeJavaListStringWithDefault(x: java.util.List[String] ?= java.util.Arrays.asList("abc", "def", "ghi"))
GET         /take-jlist-str-jopt-d           controllers.Application.takeJavaListStringOptionalWithDefault(x: java.util.Optional[java.util.List[String]] ?= java.util.Optional.of(java.util.Arrays.asList("abc", "def", "ghi")))
GET         /take-jlist-jshort-d             controllers.Application.takeJavaListShortWithDefault(x: java.util.List[java.lang.Short] ?= java.util.List.of(1.toShort, 2.toShort, 3.toShort))
GET         /take-jlist-jshort-jopt-d        controllers.Application.takeJavaListShortOptionalWithDefault(x: java.util.Optional[java.util.List[java.lang.Short]] ?= java.util.Optional.of(java.util.Arrays.asList(1.toShort, 2.toShort, 3.toShort)))
GET         /take-jlist-jint-d               controllers.Application.takeJavaListIntegerWithDefault(x: java.util.List[java.lang.Integer] ?= java.util.Arrays.asList(1, 2, 3))
GET         /take-jlist-jint-jopt-d          controllers.Application.takeJavaListIntegerOptionalWithDefault(x: java.util.Optional[java.util.List[java.lang.Integer]] ?= java.util.Optional.of(java.util.Arrays.asList(1, 2, 3)))

GET         /urlcoding/:d/*s                 controllers.Application.urlcoding(d, s, q)

GET         /ident/:è27                      controllers.πø$7ß.ôü65$t(è27: java.lang.Integer)

->          /module                          module.Routes

### Keywords
GET        /keyword/abstract-f                  controllers.Application.keyword(abstract = "fixed")
GET        /keyword/abstract-d                  controllers.Application.keywordDefault(abstract ?= "default")
GET        /keyword/abstract/:abstract          controllers.Application.keywordPath(abstract)
GET        /keyword/abstract                    controllers.Application.keyword(abstract)
GET        /keyword/case                        controllers.Application.keyword(case)
GET        /keyword/catch                       controllers.Application.keyword(catch)
GET        /keyword/class                       controllers.Application.keyword(class)
GET        /keyword/def                         controllers.Application.keyword(def)
GET        /keyword/do                          controllers.Application.keyword(do)
GET        /keyword/else                        controllers.Application.keyword(else)
GET        /keyword/extends                     controllers.Application.keyword(extends)
GET        /keyword/false                       controllers.Application.keyword(false)
GET        /keyword/final                       controllers.Application.keyword(final)
GET        /keyword/finally                     controllers.Application.keyword(finally)
GET        /keyword/for                         controllers.Application.keyword(for)
GET        /keyword/forSome                     controllers.Application.keyword(forSome)
GET        /keyword/if                          controllers.Application.keyword(if)
GET        /keyword/implicit                    controllers.Application.keyword(implicit)
GET        /keyword/import                      controllers.Application.keyword(import)
GET        /keyword/lazy                        controllers.Application.keyword(lazy)
GET        /keyword/match                       controllers.Application.keyword(match)
GET        /keyword/new                         controllers.Application.keyword(new)
GET        /keyword/null                        controllers.Application.keyword(null)
GET        /keyword/object                      controllers.Application.keyword(object)
GET        /keyword/override                    controllers.Application.keyword(override)
GET        /keyword/package                     controllers.Application.keyword(package)
GET        /keyword/private                     controllers.Application.keyword(private)
GET        /keyword/protected                   controllers.Application.keyword(protected)
GET        /keyword/return                      controllers.Application.keyword(return)
GET        /keyword/sealed                      controllers.Application.keyword(sealed)
GET        /keyword/super                       controllers.Application.keyword(super)
GET        /keyword/this                        controllers.Application.keyword(this)
GET        /keyword/throw                       controllers.Application.keyword(throw)
GET        /keyword/trait                       controllers.Application.keyword(trait)
GET        /keyword/true                        controllers.Application.keyword(true)
GET        /keyword/try                         controllers.Application.keyword(try)
GET        /keyword/type                        controllers.Application.keyword(type)
GET        /keyword/val                         controllers.Application.keyword(val)
GET        /keyword/var                         controllers.Application.keyword(var)
GET        /keyword/while                       controllers.Application.keyword(while)
GET        /keyword/with                        controllers.Application.keyword(with)
GET        /keyword/yield                       controllers.Application.keyword(yield)

### Assets
GET         /public/*file                    controllers.Assets.versioned(path = "/public", file: controllers.Assets.Asset)

# This triggers a string interpolation warning, since there is an identifier called "routes" in scope, and it
# generates a non interpolated string containing $routes. As does this comment.
GET         /intwarn/:routes                 controllers.Application.interpolatorWarning(routes)
