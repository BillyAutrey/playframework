# Copyright (C) from 2022 The Play Framework Contributors <https://github.com/playframework>, 2011-2021 Lightbend Inc. <https://www.lightbend.com>

GET         /                               controllers.Application.index
POST        /post                           controllers.Application.post
GET         /with/:param                    controllers.Application.withParam(param)

GET         /instance                       @controllers.InstanceController.index

GET         /users/:userId                  controllers.Application.user(userId: models.UserId)
GET         /query-user                     controllers.Application.queryUser(userId: models.UserId)

GET         /escapes/$i<\d+>                controllers.Application.takeIntEscapes(i: java.lang.Integer)

GET         /take-bool                      controllers.Application.takeBool(b: java.lang.Boolean)
GET         /take-bool-2/:b                 controllers.Application.takeBool2(b: java.lang.Boolean)

GET         /take-str                       controllers.Application.takeString(x: String)
GET         /take-str-jopt                  controllers.Application.takeStringOptional(x: java.util.Optional[String])
GET         /take-jchar                     controllers.Application.takeCharacter(x: Character)
GET         /take-jchar-jopt                controllers.Application.takeCharacterOptional(x: java.util.Optional[Character])
GET         /take-jshort                    controllers.Application.takeJavaShort(x: java.lang.Short)
GET         /take-jshort-jopt               controllers.Application.takeJavaShortOptional(x: java.util.Optional[java.lang.Short])
GET         /take-jint                      controllers.Application.takeInteger(x: java.lang.Integer)
GET         /take-jint-jopt                 controllers.Application.takeIntegerOptional(x: java.util.Optional[java.lang.Integer])
GET         /take-joptint                   controllers.Application.takeOptionalInt(x: java.util.OptionalInt)
GET         /take-joptlong                  controllers.Application.takeOptionalLong(x: java.util.OptionalLong)
GET         /take-joptdouble                controllers.Application.takeOptionalDouble(x: java.util.OptionalDouble)
GET         /take-jlist-jchar               controllers.Application.takeJavaListCharacter(x: java.util.List[Character])
GET         /take-jlist-jchar-jopt          controllers.Application.takeJavaListCharacterOptional(x: java.util.Optional[java.util.List[Character]])
GET         /take-jlist-str                 controllers.Application.takeJavaListString(x: java.util.List[String])
GET         /take-jlist-str-jopt            controllers.Application.takeJavaListStringOptional(x: java.util.Optional[java.util.List[String]])
GET         /take-jlist-jshort              controllers.Application.takeJavaListShort(x: java.util.List[java.lang.Short])
GET         /take-jlist-jshort-jopt         controllers.Application.takeJavaListShortOptional(x: java.util.Optional[java.util.List[java.lang.Short]])
GET         /take-jlist-jint                controllers.Application.takeJavaListInteger(x: java.util.List[java.lang.Integer])
GET         /take-jlist-jint-jopt           controllers.Application.takeJavaListIntegerOptional(x: java.util.Optional[java.util.List[java.lang.Integer]])
####
#### Same again with defaults (/take-...-d):
####
GET         /take-str-d                     controllers.Application.takeStringWithDefault(x: String ?= "abc")
GET         /take-str-jopt-d                controllers.Application.takeStringOptionalWithDefault(x: java.util.Optional[String] ?= java.util.Optional.of("abc"))
GET         /take-jchar-d                   controllers.Application.takeCharacterWithDefault(x: Character ?= 'a')
GET         /take-jchar-jopt-d              controllers.Application.takeCharacterOptionalWithDefault(x: java.util.Optional[Character] ?= java.util.Optional.of('a'))
GET         /take-jshort-d                  controllers.Application.takeJavaShortWithDefault(x: java.lang.Short ?= 123.toShort)
GET         /take-jshort-jopt-d             controllers.Application.takeJavaShortOptionalWithDefault(x: java.util.Optional[java.lang.Short] ?= java.util.Optional.of(123.toShort))
GET         /take-jint-d                    controllers.Application.takeIntegerWithDefault(x: java.lang.Integer ?= 123)
GET         /take-jint-jopt-d               controllers.Application.takeIntegerOptionalWithDefault(x: java.util.Optional[java.lang.Integer] ?= java.util.Optional.of(123))
GET         /take-joptint-d                 controllers.Application.takeOptionalIntWithDefault(x: java.util.OptionalInt ?= java.util.OptionalInt.of(123))
GET         /take-joptlong-d                controllers.Application.takeOptionalLongWithDefault(x: java.util.OptionalLong ?= java.util.OptionalLong.of(123L))
GET         /take-joptdouble-d              controllers.Application.takeOptionalDoubleWithDefault(x: java.util.OptionalDouble ?= java.util.OptionalDouble.of(1.23))
GET         /take-jlist-jchar-d             controllers.Application.takeJavaListCharacterWithDefault(x: java.util.List[Character] ?= java.util.List.of('a', 'b', 'c'))
GET         /take-jlist-jchar-jopt-d        controllers.Application.takeJavaListCharacterOptionalWithDefault(x: java.util.Optional[java.util.List[Character]] ?= java.util.Optional.of(java.util.List.of('a', 'b', 'c')))
GET         /take-jlist-str-d               controllers.Application.takeJavaListStringWithDefault(x: java.util.List[String] ?= java.util.Arrays.asList("abc", "def", "ghi"))
GET         /take-jlist-str-jopt-d          controllers.Application.takeJavaListStringOptionalWithDefault(x: java.util.Optional[java.util.List[String]] ?= java.util.Optional.of(java.util.Arrays.asList("abc", "def", "ghi")))
GET         /take-jlist-jshort-d            controllers.Application.takeJavaListShortWithDefault(x: java.util.List[java.lang.Short] ?= java.util.List.of(1.toShort, 2.toShort, 3.toShort))
GET         /take-jlist-jshort-jopt-d       controllers.Application.takeJavaListShortOptionalWithDefault(x: java.util.Optional[java.util.List[java.lang.Short]] ?= java.util.Optional.of(java.util.Arrays.asList(1.toShort, 2.toShort, 3.toShort)))
GET         /take-jlist-jint-d              controllers.Application.takeJavaListIntegerWithDefault(x: java.util.List[java.lang.Integer] ?= java.util.Arrays.asList(1, 2, 3))
GET         /take-jlist-jint-jopt-d         controllers.Application.takeJavaListIntegerOptionalWithDefault(x: java.util.Optional[java.util.List[java.lang.Integer]] ?= java.util.Optional.of(java.util.Arrays.asList(1, 2, 3)))

GET         /urlcoding/:d/*s                controllers.Application.urlcoding(d, s, q)

GET         /ident/:è27                     controllers.πø$7ß.ôü65$t(è27: java.lang.Integer)

GET         /hello                          controllers.Application.hello
GET         /hello2                         controllers.Application.hello

->          /module                         module.Routes

GET         /routes                         controllers.Application.route(abstract)
GET         /routes                         controllers.Application.route(case)
GET         /routes                         controllers.Application.route(catch)
GET         /routes                         controllers.Application.route(class)
GET         /routes                         controllers.Application.route(def)
GET         /routes                         controllers.Application.route(do)
GET         /routes                         controllers.Application.route(else)
GET         /routes                         controllers.Application.route(extends)
GET         /routes                         controllers.Application.route(false)
GET         /routes                         controllers.Application.route(final)
GET         /routes                         controllers.Application.route(finally)
GET         /routes                         controllers.Application.route(for)
GET         /routes                         controllers.Application.route(forSome)
GET         /routes                         controllers.Application.route(if)
GET         /routes                         controllers.Application.route(implicit)
GET         /routes                         controllers.Application.route(import)
GET         /routes                         controllers.Application.route(lazy)
GET         /routes                         controllers.Application.route(match)
GET         /routes                         controllers.Application.route(new)
GET         /routes                         controllers.Application.route(null)
GET         /routes                         controllers.Application.route(object)
GET         /routes                         controllers.Application.route(override)
GET         /routes                         controllers.Application.route(package)
GET         /routes                         controllers.Application.route(private)
GET         /routes                         controllers.Application.route(protected)
GET         /routes                         controllers.Application.route(return)
GET         /routes                         controllers.Application.route(sealed)
GET         /routes                         controllers.Application.route(super)
GET         /routes                         controllers.Application.route(this)
GET         /routes                         controllers.Application.route(throw)
GET         /routes                         controllers.Application.route(trait)
GET         /routes                         controllers.Application.route(try)
GET         /routes                         controllers.Application.route(true)
GET         /routes                         controllers.Application.route(type)
GET         /routes                         controllers.Application.route(val)
GET         /routes                         controllers.Application.route(var)
GET         /routes                         controllers.Application.route(while)
GET         /routestest                     controllers.Application.routetest(with)
GET         /routestest                     controllers.Application.routetest(yield)

# Test for default values for scala keywords
GET         /routesdefault                  controllers.Application.routedefault(type ?= "x")

GET         /public/*file                   controllers.Assets.versioned(path="/public", file: controllers.Assets.Asset)

# Test for fixed values for scala keywords

GET         /fixed_value                    controllers.Application.fixedValue(type = "x")
GET         /fixed_value/:type              controllers.Application.fixedValue(type: String)

# This triggers a string interpolation warning, since there is an identifier called "routes" in scope, and it
# generates a non interpolated string containing $routes. As does this comment.
GET         /intwarn/:routes                controllers.Application.interpolatorWarning(routes)
